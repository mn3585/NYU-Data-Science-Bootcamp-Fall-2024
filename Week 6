# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

data = pd.read_csv(r"C:\Users\Naznin\Downloads\employee.csv")  # Ensure the dataset file path is correct

# Drop unnecessary columns: id, timestamp, and country
data = data.drop(columns=['id', 'timestamp', 'country'])

data.loc[data['hours_per_week'].isna(), 'hours_per_week'] = data['hours_per_week'].median()
data.loc[data['telecommute_days_per_week'].isna(), 'telecommute_days_per_week'] = data['telecommute_days_per_week'].median()

# Handling missing values for categorical columns by dropping rows with NaNs
data = data.dropna()

# Encode binary variables (is_manager, certifications)
binary_cols = ['is_manager', 'certifications']
for c in binary_cols:
    data[c] = data[c].replace(to_replace=['Yes'], value=1)
    data[c] = data[c].replace(to_replace=['No'], value=0)

# Encode categorical variables (employment_status, job_title, education, is_education_computer_related)
cat_cols = ['employment_status', 'job_title', 'education', 'is_education_computer_related']
final_data = pd.get_dummies(data, columns=cat_cols, drop_first=True, dtype=int)

# Split data into features (X) and target variable (y)
y = final_data['salary']
X = final_data.drop(columns=['salary'])

# Split the data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply StandardScaler to numerical features
num_cols = ['job_years', 'hours_per_week', 'telecommute_days_per_week']
scaler = StandardScaler()
scaler.fit(X_train[num_cols])
X_train[num_cols] = scaler.transform(X_train[num_cols])
X_test[num_cols] = scaler.transform(X_test[num_cols])

# Linear Regression Model
reg = LinearRegression()
reg.fit(X_train, y_train)

# Evaluate the model on test data using normalized Mean Squared Error
y_test_pred = reg.predict(X_test)
test_mse = mean_squared_error(y_test_pred, y_test) / np.mean(y_test)
print("Test Mean Squared Error:", test_mse)
